<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eventSQL">

	<select id="getEventList" parameterType="java.util.Map" resultType="event">
		select * from 
		(select rownum rn, tt.* from 
		(select * from event order by id desc)tt
		)where rn &gt;= #{startNum} and rn &lt;= #{endNum}
	</select>
	
	<select id="getTotalEventList" resultType="int">
		select count(*) from event
	</select>
	
	<delete id="deleteEvent" parameterType="String">
		delete event where id=#{id} 
	</delete>
	
	<!-- 이벤트 등록 -->
	<insert id="eventWrite" parameterType="event">
	   insert into event values(seq_event.nextval
	                        , #{event_subject}
	                        , #{event_content}
	                        , #{event_startDate}
	                        , #{event_endDate}
	                        , #{event_category}
	                        , #{event_img_banner}
	                        , #{event_img_detail}
	                        )
	</insert>
	
	<!-- 이벤트 1개의 DTO 꺼내기 -->
	<select id="getEventView" parameterType="String" resultType="event">
		select * from event where id=#{id} 
	</select>
	
	<!-- 최신 배너 리스트를 꺼내기 -->
   <select id="AllListBanner" resultType="event">
      select * from event where rownum &lt;= 2 order by id desc 
   </select>


	<!-- 공지사항 -->
	<select id="getNoticeList" parameterType="java.util.Map" resultType="notice">
		select * from 
		(select rownum rn, tt.* from 
		(select * from notice order by id desc)tt
		)where rn &gt;= #{startNum} and rn &lt;= #{endNum}
	</select>
	
	<!-- 공지사항 글 갯수 -->
	<select id="getTotalNoticeList" resultType="int">
		select count(*) from notice
	</select>
	
	<!-- 공지 1개의 DTO 꺼내기 -->
	<select id="getNoticeView" parameterType="String" resultType="notice">
		select * from notice where id=#{id} 
	</select>
	
	<!-- /////////////////////////////////// 상품 관리 ////////////////////////////////////////// -->
	<!-- 상품관리 -->
	<select id="getProductList" parameterType="java.util.Map" resultType="event.bean.ProductManagingDTO">
		<![CDATA[
		select * from (select rownum rn, tt.* from 
			(select id, product_code, product_name, product_price, product_category_name, product_category1 from product)tt) 
		where rn >= #{startNum} and rn <= #{endNum}
		]]>
	</select>
	
	<!-- 상품 갯수 -->
	<select id="getProductPagingA" resultType="int">
		select count(*) from product
	</select>
	
	<!-- 상품id로 리뷰 있나 검증 -->
	<select id="isNullProductReview" parameterType="int" resultType="furniture.bean.ReviewDTO" >
		select * from review where product_id=#{id}
	</select>
	
	<!-- 상품id로 별점 평균 -->
	<select id="getproductReviewAvg" parameterType="int" resultType="Double" >
		select avg(review_stars) from review where product_id=#{id}
	</select>

	<!-- 상품id로 색상 리스트 리턴 -->
	<select id="getProductColors" parameterType="int" resultType="String">
		select color from product_option where id=#{id}
	</select>

	<!-- 상품 삭제 -->
	<delete id="productListDelete" parameterType="java.util.Map">
		delete PRODUCT where id in 
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>



	<select id="getSortedProductListYESCATEreview" parameterType="java.util.Map" resultType="event.bean.ProductManagingDTO" >
	<![CDATA[
		select * from 
		    ( 
		    select p.id, p.product_code, p.product_name, p.product_price, p.product_category_name, p.product_category1, r.review, rownum rn
		    from product p,
		        (
		        select round(avg(review_stars),1) as review, product_id from review
		        group by product_id
		        order by review asc
		        )r
		    where p.id = r.product_id and product_category2 = #{selectCate}
	        order by ${sortOption} ${orderBy}
		    )
		where rn >= #{startNum} and rn <= #{endNum}
	]]>
	</select>

	<select id="getSortedProductListNOCATEreview" parameterType="java.util.Map" resultType="event.bean.ProductManagingDTO" >
	<![CDATA[
		select * from 
		    ( 
		    select p.id, p.product_code, p.product_name, p.product_price, p.product_category_name, p.product_category1, r.review, rownum rn
		    from product p,
		        (
		        select round(avg(review_stars),1) as review, product_id from review
		        group by product_id
		        order by review asc
		        )r
		    where p.id = r.product_id
	        order by ${sortOption} ${orderBy}
		    )
		where rn >= #{startNum} and rn <= #{endNum}
	]]>
	</select>

	
</mapper>
