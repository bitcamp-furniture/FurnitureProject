<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="adminSQL">
 	<!-- 회원목록 -->
	<select id="getMemberList" parameterType="java.util.Map" resultType="member">
 		select * from(select rownum rn, tt.* from
 				(select * from member order by created_at desc)tt)
 				         where <![CDATA[rn>= #{startNum}]]> and  <![CDATA[rn<= #{endNum}]]>   
 	</select>
 
 	<!-- 총 글 수 -->
	<select id="getTotalA" resultType="int">
		select count(*) from member
	</select>
	
	<!-- 검색 -->
	<select id="getSearchMemberList" parameterType="java.util.Map" resultType="member">
         select * from(select rownum rn, tt. * from
          (select * from member where (name || email) like '%'||#{keyword}||'%' order by created_at desc)tt) 
          where <![CDATA[rn >= #{startNum}]]> and <![CDATA[rn <= #{endNum}]]>
    </select>
    
    <!-- 검색 총 글 수 -->
    <select id="getSearchTotal" parameterType="java.util.Map" resultType="int">
      select count(*) from member where (name || email) like '%'||#{keyword}||'%'
    </select>
    
    <!-- 회원삭제 -->
	<delete id="memberListDelete" parameterType="java.util.Map">
		delete member where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>

	<select id="reviewList" parameterType="java.util.Map" resultType="review">
		select * from 
		(select rownum rn, tt.* from 
		(select * from REVIEW order by id desc)tt
		)where rn &gt;= #{startNum} and rn &lt;= #{endNum}
	</select>
	
	<!-- 모든 리스트 개수  -->
	<select id="getTotalReviewList" resultType="int">
		select count(*) from REVIEW
	</select>
	
	<!-- 선택 리뷰 삭제 -->
	<delete id="adminReviewListDelete" parameterType="java.util.Map">
		delete REVIEW where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			<!--${array[i]}  -->
		</foreach>
	</delete>
	
	<!-- sort1 오름차순-->
	<select id="adminreviewASCList" parameterType="java.util.Map" resultType="review">
	<![CDATA[
		select * from 
		(select rownum rn, tt.* from 
		(select * from REVIEW order by ${sort1} asc)tt
		)where rn >= #{startNum} and rn <= #{endNum}
		]]>
	</select>
	
	<!-- sort1 내림차순-->
	<select id="adminreviewDESCList" parameterType="java.util.Map" resultType="review">
	<![CDATA[
		select * from 
		(select rownum rn, tt.* from 
		(select * from REVIEW order by ${sort1} desc)tt
		)where rn >= #{startNum} and rn <= #{endNum}
		]]>
	</select>
	
	 	<select id="getAskList" parameterType="java.util.Map" resultType="ask">
 		select * from(select rownum rn, tt.* from
 				(select * from ask order by seq desc)tt)
 				         where <![CDATA[rn>= #{startNum}]]> and  <![CDATA[rn<= #{endNum}]]>   
 	</select>
 	
 	<select id="getAskTotalA"  parameterType="java.util.Map" resultType="Integer">
 		select count(*) as count from ask
 	</select>
 	
 	<select id="askAnswer" parameterType="String" resultType="ask">
		select * from ask where seq=#{seq}
	</select>
	
	<select id="askAnswerDone" parameterType="java.util.Map">
		update ask set answer=#{answer}, reply=1 where seq=#{seq}
	</select>
	
	<!-- 대시보드 ... 최신 리뷰 리스트 -->
	<select id="getRecentReviewList" resultType="review">
	<![CDATA[
		select * from (
			select * from review order by created_at desc
		) where rownum <= 3
	]]>
	</select>

	<!-- 대시보드 ... 최신 문의 리스트 -->
	<select id="getRecentQnAList" resultType="ask">
	<![CDATA[
		select * from (
			select * from ask order by created_at desc
		) where rownum <= 5
	]]>
	</select>
	
	<!-- 주문내역 띄우기 -->
 	<select id="getOrderControl" parameterType="java.util.Map" resultType="adminProduct">
 		<!-- 	select name, phone, zipcode, addr1, addr2 from member -->
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price, 
					od.order_status,
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb
				
				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
					                        
                    where od.order_status = 'PAYMENTCOMPLETED'
				 order by order_date desc

	</select>
	
	<!-- 배송준비중 띄우기 -->
 	<select id="getDeliveryReady" parameterType="java.util.Map" resultType="adminProduct">
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price,
					od.order_status,
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb
				
				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
                        
                    where od.order_status = 'READY'
				 order by order_date desc
	</select>
	
	<!-- 배송중 띄우기 -->
 	<select id="getDuringDeliver" parameterType="java.util.Map" resultType="adminProduct">
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price, 
					od.order_status, 
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb
				
				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
                        
                    where od.order_status = 'PROCESSING'
				 order by order_date desc
	</select>

	<!-- 배송완료 띄우기 -->
 	<select id="getDeliverComplete" parameterType="java.util.Map" resultType="adminProduct">
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price, 
					od.order_status,
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb
				
				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
                        
                    where od.order_status = 'COMPLETED'
				 order by order_date desc
	</select>
	
	<!-- 구매확정 띄우기 -->
 	<select id="getPurchaseConfirmed" parameterType="java.util.Map" resultType="adminProduct">
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price,
					od.order_status,
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb
				
				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
                        
                    where od.order_status = 'FINISH'
				 order by order_date desc
	</select>
	
	<!-- 취소처리 띄우기 -->
 	<select id="getOrderCancle" parameterType="java.util.Map" resultType="adminProduct">
		select distinct 	
                    oc.delivery_number,
                    o.order_number,
					o.order_date,
					p.product_name,
					od.product_color,
					od.product_qty,
					od.product_price,
					od.order_status,
					od.id,
                    m.name,
                    m.phone,
					m.zipcode,
					m.addr1,
					m.addr2,
					pi.product_img_thumb

				 from member m
                    inner join ordercontrol oc
					    on m.id = oc.member_id
                    inner join orders o
                        on oc.order_number=o.order_number
					inner join orders_detail od
						on o.order_number=od.order_number
					inner join product p
						on od.product_id=p.id
					inner join product_image pi
						on p.id=pi.id
                    where od.order_status = 'CANCEL'
				 order by order_date desc
	</select>
	
	<!-- 주문 날짜만 가져오는  SQL -->
	<select id="orderDay" resultType="String">
	<![CDATA[
	   select TO_CHAR(order_date,'MM/DD')
	   from orders
	   where sysdate-order_date <= 7
	   GROUP BY TO_CHAR(order_date,'MM/DD')
	   order by TO_CHAR(order_date,'MM/DD')
	]]>
	</select>
	
	<!-- 주문 건수만 가져오는 SQL -->
	<select id="orderCount" resultType="int">
	<![CDATA[
	   select count(*) from orders 
	   where sysdate-order_date <= 7
	   GROUP BY TO_CHAR(order_date,'MM/DD')
	   order by TO_CHAR(order_date,'MM/DD')
	]]>
	</select>
	
	<!-- 일별 매출만 가져오는 SQL -->
	<select id="orderSales" resultType="int">
	<![CDATA[
	   select sum(total_amount)/1000000 
	   from orders
	   where sysdate-order_date <= 7
	   GROUP BY TO_CHAR(order_date,'MM/DD')
	   order by TO_CHAR(order_date,'MM/DD')   
	]]>
	</select>
	
   <!-- 카테고리별 매출 높은 순으로  -->
   <select id="orderCateSales" resultType="String">
   <![CDATA[
      select * from(
      select sum(o.product_amounts)
      from orders_detail o,product p
      where o.product_id = p.id
      group by p.product_category_name,o.product_amounts
      order by sum(o.product_amounts) desc)
      where rownum <= 6
   ]]>
   </select>
   
   <select id="orderCateName" resultType="String">
   <![CDATA[
      select * from(
      select p.product_category_name 
      from orders_detail o,product p
      where o.product_id = p.id
      group by p.product_category_name,o.product_amounts
      order by sum(o.product_amounts) desc)
      where rownum <= 6
   ]]>
   </select>
   
   	<!-- 운송장 발송 버튼 클릭 했을 때 -->
	<update id="invoice" parameterType="java.util.Map">
	begin
		merge
		into ordercontrol oc
		using (select * from orders_detail)od
		on(oc.order_number=od.order_number)
		when matched then
		update set oc.delivery_number = #{delivery_number} where od.id=#{id};
		
		update orders_detail set order_status = 'PROCESSING' where id=#{id};
	end;
	</update>
	
	<!-- 배송준비 버튼 클릭 했을 때 -->
	<update id="deliveryReady" parameterType="java.util.Map">
		update orders_detail set order_status = 'READY' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 입금확인 버튼 클릭 시 -->
	<update id="paymentConfirm" parameterType="java.util.Map">
		update orders_detail set order_status = 'PAYMENTCOMPLETED' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 배송중 버튼 클릭 시 -->
	<update id="delivery" parameterType="java.util.Map">
		update orders_detail set order_status = 'PROCESSING' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 발송지연 -->
	<update id="delay" parameterType="java.util.Map">
		update orders_detail set order_status = 'DELAY' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 주문취소 -->
	<update id="cancelSales" parameterType="java.util.Map">
		update orders_detail set order_status = 'CANCEL' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 주문취소 2 (포인트 회수) -->
	<update id="canclePoint" parameterType="java.util.Map">
		update member set point = point - (select distinct sum (product_amounts) * 0.01 from orders_detail where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
			where id = 
	        (select distinct member_id 
	            from orders o
	                inner join orders_detail od
	                    on o.order_number=od.order_number
	         where od.id in <foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
	</update>
	
	<!-- 주문취소 3 (누적금액 회수) -->
	<update id="cancleAmount" parameterType="java.util.Map">
		update member set amount = amount - (select distinct sum (product_amounts) from orders_detail where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
			where id = 
	        (select distinct member_id 
	            from orders o
	                inner join orders_detail od
	                    on o.order_number=od.order_number
	         where od.id in <foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
	</update>
	
	<!-- 주문취소 (구매확정 외의 탭에 있는 주문취소 버튼) -->
	<update id="cancelSalesComplete" parameterType="java.util.Map">
		update orders_detail set order_status = 'CANCEL' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 배송완료 -->
	<update id="deliveryComplete" parameterType="java.util.Map">
		update orders_detail set order_status = 'COMPLETED' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 구매확정 -->
	<update id="purchaseConfirmed" parameterType="java.util.Map">
		update orders_detail set order_status = 'FINISH' where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</update>
	
	<!-- 구매확정 2 -->
	<update id="memberCumulativerAmount" parameterType="java.util.Map">
		update member set amount = amount + (select distinct sum (product_amounts) from orders_detail where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
			where id = 
	        (select distinct member_id 
	            from orders o
	                inner join orders_detail od
	                    on o.order_number=od.order_number
	         where od.id in <foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
	</update>
	
	<!-- 구매확정 3 (포인트 지급)-->
	<update id="memberPointUpdate" parameterType="java.util.Map">
		update member set point = point + (select distinct sum (product_amounts) * 0.01 from orders_detail where id in
		<foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
			where id = 
	        (select distinct member_id 
	            from orders o
	                inner join orders_detail od
	                    on o.order_number=od.order_number
	         where od.id in <foreach collection="array" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>)
	</update>
	
	<!-- 주문검색 -->
	<select id="getSearchOrderList" parameterType="java.util.Map" resultType="adminProduct">
         select * from(select rownum rn, tt. * from
          (select * from orders where order_number like '%'||#{keyword}||'%' order by order_date desc)tt) 
          where <![CDATA[rn >= #{startNum}]]> and <![CDATA[rn <= #{endNum}]]>
    </select>

	<!-- ////////////////////////////////////////// 대시보드 ... 일간 요약표 -->
	<select id="dailySummaryPC" parameterType="int" resultType="int">
		select nvl(count(*), 0) as product_count from orders where to_char(order_date,'MM/DD')=to_char(sysdate-${i},'MM/DD')
   </select>

	<select id="dailySummaryPP" parameterType="int" resultType="int">
		select nvl(sum(total_amount), 0) as product_price from orders where to_char(order_date,'MM/DD')=to_char(sysdate-${i},'MM/DD')
   </select>
	
	<select id="dailySummaryJC" parameterType="int" resultType="int">
	   	select nvl(count(*), 0) as join_count from member where to_char(created_at,'MM/DD')=to_char(sysdate-${i},'MM/DD')
   </select>

	<select id="dailySummaryAC" parameterType="int" resultType="int">
	   	select nvl(count(*), 0) as ask_count from ask where to_char(created_at,'MM/DD')=to_char(sysdate-${i},'MM/DD')
   </select>

	<select id="dailySummaryRC" parameterType="int" resultType="int">
	   	select nvl(count(*), 0) as review_count from review where to_char(created_at,'MM/DD')=to_char(sysdate-${i},'MM/DD')
   </select>
	
	<select id="dailySummaryDate" parameterType="int" resultType="java.sql.Date">
		select sysdate-${i} from dual
   </select>

</mapper>
